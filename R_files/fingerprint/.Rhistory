bt.dev <- DataFrameBt[sample.ind==1,]
bt.val <- DataFrameBt[sample.ind==2,]
class(bt.val$location)
varNames <- names(bt.dev)
varNames
termCrosssell<-read.csv(file="termCrosssell.csv",header = T)
termCrosssell<-read.csv(file="bank.csv",header = T)
names(termCrosssell)
table(termCrosssell$y)/nrow(termCrosssell)
table(termCrosssell$y)/nrow(termCrosssell)
termCrosssell$y
termCrosssell
names(termCrosssell)
sample.ind <- sample(2,
nrow(termCrosssell),
replace = T,
prob = c(0.6,0.4))
cross.sell.dev <- termCrosssell[sample.ind==1,]
cross.sell.val <- termCrosssell[sample.ind==2,]
cross.sell.dev
table(cross.sell.dev$y)/nrow(cross.sell.dev)
table(cross.sell.val$y)/nrow(cross.sell.val)
class(cross.sell.dev$y)
varNames <- varNames[!varNames %in% c("y")]
varNames
varNames
varNames <- names(cross.sell.dev)
varNames <- varNames[!varNames %in% c("y")]
varNames
cross.sell.dev
varNames1 <- paste(varNames, collapse = "+")
varNames1
rf.form <- as.formula(paste("y", varNames1, sep = " ~ "))
bt.dev <- DataFrameBt[sample.ind==1,]
bt.val <- DataFrameBt[sample.ind==2,]
class(bt.val$location)
varNames <- names(bt.dev)
rf.form <- as.formula(paste("location", varNames, sep = " ~ "))
rf.form
cross.sell.rf <- randomForest(rf.form,
bt.dev,
ntree=500,
importance=T)
plot(cross.sell.rf)
cross.sell.rf <- randomForest(rf.form,
bt.dev,
ntree=500,
importance=T)
cross.sell.rf <- randomForest(bt.val,
bt.dev,
ntree=500,
importance=T)
# Load the party package. It will automatically load other required packages.
library(party)
# Print some records from data set readingSkills.
print(head(readingSkills)
print(head(readingSkills))
print(head(readingSkills))
readingSkills
print(head(readingSkills))
library(randomForest)
nativeSpeaker
age
output.forest <- randomForest(nativeSpeaker ~ age + shoeSize + score,
data = readingSkills)
output.forest <- randomForest(rasp1 ~ rasp2 + rasp3 + rasp4, location,
data = DataFrameBt)
library(randomForest)
output.forest <- randomForest(rasp1 ~ rasp2 + rasp3 + rasp4, location,
data = DataFrameBt)
output.forest <- randomForest(rasp1 ~ rasp2 + rasp3 + rasp4,
data = DataFrameBt)
output.forest
print(importance(fit,type = 2))
data(Glass)
”
data(“Glass”)
data(glass)
library(rpart)
library(mlbench)
data(“Glass”)
data(Glass)
library(rpart)
library(mlbench)
data(Glass)
set.seed(42)
Glass[,train] <- ifelse(runif(nrow(Glass))<0.8,1,0)
sample.ind.glass <- sample(2, nrow(Glass), replace = T, prob = c(0.7,0.3))
trainGlass <- Glass[sample.ind.glass==1,]
testGlass <- Glass[sample.ind.glass==2,]
trainColNum <- grep(train,names(trainGlass))
library(randomForest)
data(Glass)
set.seed(42)
Glass[,train] <- ifelse(runif(nrow(Glass))<0.8,1,0)
trainColNum <- grep(train,names(trainGlass))
trainGlass <- Glass[Glass$train==1,]
trainGlass
testGlass
Glass
trainGlass
trainColNum
Glass[,train] <- ifelse(runif(nrow(Glass))<0.8,1,0)
sample.ind.glass <- sample(2, nrow(Glass), replace = T, prob = c(0.8,0.2))
sample.ind.glass <- sample(2, nrow(Glass), replace = T, prob = c(0.8,0.2))
trainGlass <- Glass[sample.ind.glass==1,]
testGlass <- Glass[sample.ind.glass==2,]
trainColNum <- grep(train,names(trainGlass))
dim(trainGlass)
trainColNum <- 170
trainGlass <- trainGlass[,-trainColNum]
trainGlass
testGlass
testGlass <- testGlass[,-trainColNum]
testGlass
typeColNum <- grep(Type,names(Glass))
data(Glass)
Glass
Type ~.
sample.ind.glass <- sample(2, nrow(Glass), replace = T, prob = c(0.8,0.2))
trainGlass <- Glass[sample.ind.glass==1,]
testGlass <- Glass[sample.ind.glass==2,]
dim(trainGlass)
data(Glass)
set.seed(42)
sample.ind.glass <- sample(2, nrow(Glass), replace = T, prob = c(0.8,0.2))
Glass
trainGlass <- Glass[sample.ind.glass==1,]
testGlass <- Glass[sample.ind.glass==2,]
trainGlass
testGlass
sample.ind.glass <- sample(2, nrow(Glass), replace = T, prob = c(0.8,0.2))
trainGlass <- Glass[sample.ind.glass==1,]
testGlass <- Glass[sample.ind.glass==2,]
trainGlass
dim(testGlass)
testGlass
dim(trainGlass)
testGlass
typeColNum <- grep(Type,names(Glass))
Glass
Glass.rf <- randomForest(Type ~.,data = trainGlass, importance=TRUE, xtest=testGlass[,-typeColNum],ntree=1000)
Glass.rf <- randomForest(Type ~.,data = trainGlass, importance=TRUE,ntree=1000)
Glass.rf
Glass.rf <- randomForest(location ~.,data = bt.dev, importance=TRUE,ntree=1000)
Glass.rf <- randomForest(location ~., data = bt.dev, importance=TRUE,ntree=1000)
cross.sell.rf <- randomForest(bt.val,
bt.dev,
ntree=500,
importance=T)
cross.sell.rf <- randomForest(location~.,
bt.dev,
ntree=500,
importance=T)
Glass.rf <- randomForest(Type ~.,data = trainGlass, importance=TRUE,ntree=1000)
Glass.rf
rf.1 <- randomForest(x = train_bt, y = label[1:1200], importance = TRUE, ntree = 1000)
rf.1
class(bt.val$location)
Glass.rf <- randomForest(location ~., data = bt.train, importance=TRUE,ntree=1000)
Glass.rf <- randomForest(location ~., data = bt.val, importance=TRUE,ntree=1000)
rf.train.1
train_bt
rf.1 <- randomForest(x = train_bt, importance = TRUE, ntree = 1000)
rf.1
, y = label[1:1200]
rf.1 <- randomForest(x = train_bt, y = label[1:1200], importance = TRUE, ntree = 1000)
rf.1
label <- as.factor(DataFrameBt$location)
label
bt.train
bt.train <- DataFrameBt[sample.ind==1,]
bt.train <- DataFrameBt[sample.ind==1,]
bt.val <- DataFrameBt[sample.ind==2,]
bt.train
bt.train <- bt.train[c("rasp1")]
bt.train
Glass.rf <- randomForest(bt.train, data = bt.val, importance=TRUE,ntree=1000)
rf.3<- randomForest(bt.train, data = bt.val, importance=TRUE,ntree=1000)
bt.val
bt.val <- DataFrameBt[sample.ind==2,]$location
bt.train <- bt.train[c("rasp1")]
class(bt.val$location)
rf.3<- randomForest(bt.train, data = bt.val, importance=TRUE,ntree=1000)
bt.val
bt.val <- DataFrameBt[sample.ind==2,]
bt.val <- bt.val$location
bt.val
bt.val
sample.ind <- sample(2, nrow(DataFrameBt), replace = T, prob = c(0.7,0.3))
bt.train <- DataFrameBt[sample.ind==1,]
bt.val <- DataFrameBt[sample.ind==2,]
bt.val
View(bt.val)
bt.val <- bt.val$location
bt.val
rf.3<- randomForest(bt.train, data = bt.val, importance=TRUE,ntree=1000)
rf.3
rf.3<- randomForest(bt.train, data = bt.val, importance=TRUE,ntree=1000)
rf.3
rf.3<- randomForest(bt.train, y = bt.val, importance=TRUE,ntree=1000)
rf.3<- randomForest(bt.train, data = bt.val, y=bt.val importance=TRUE,ntree=1000)
rf.3<- randomForest(bt.train, data = bt.val, y=bt.val, importance=TRUE,ntree=1000)
rf.3<- randomForest(bt.train, data = bt.val, y=bt.train, importance=TRUE,ntree=1000)
rf.3<- randomForest(bt.train, data = bt.val, importance=TRUE,ntree=1000)
rf.3<- randomForest(x = bt.train, data = bt.val, importance=TRUE,ntree=1000)
rf.3
rf.2 <- randomForest(x = train_wifi, y = label_wifi[1:10000], importance = TRUE, ntree = 700)
rf.2
train_wifi <- DataFrameWifi[1:10000, c("rasp1", "rasp2", "rasp3", "rasp4")]
label_wifi <- as.factor(DataFrameWifi$location)
set.seed(1234)
rf.2 <- randomForest(x = train_wifi, y = label_wifi[1:10000], importance = TRUE, ntree = 700)
rf.2
set.seed(1234)
train_wifi <- DataFrameWifi[1:10000, c("rasp1", "rasp2", "rasp3", "rasp4")]
label_wifi <- as.factor(DataFrameWifi$location)
set.seed(1234)
rf.2 <- randomForest(x = train_wifi, y = label_wifi[1:10000], importance = TRUE, ntree = 700)
rf.2
rf.3<- randomForest(as.factor(location) ~ rasp1 + rasp2 + rasp3 + rasp, data = DataFrameBt, importance=TRUE,ntree=1000)
rf.3<- randomForest(as.factor(location) ~ rasp1 + rasp2 + rasp3 + rasp4, data = DataFrameBt, importance=TRUE,ntree=1000)
rf.3
rf.3<- randomForest(as.factor(location) ~ rasp1 + rasp2 + rasp3 + rasp4, data = DataFrameWifi, importance=TRUE,ntree=1000)
rf.3
varImpPlot(rf.3)
rf.3<- randomForest(as.factor(location) ~., data = DataFrameWifi, importance=TRUE,ntree=1000)
rf.3
varImpPlot(rf.3)
rf.3<- randomForest(as.factor(location) ~., data = bt.train, importance=TRUE,ntree=1000)
rf.3
bt.train <- DataFrameBt[sample.ind==1,]
bt.val <- DataFrameBt[sample.ind==2,]
bt.val <- bt.val$location
bt.train <- DataFrameBt[sample.ind==1,]
bt.val <- DataFrameBt[sample.ind==2,]
rf.3<- randomForest(as.factor(location) ~., data = bt.train, importance=TRUE,ntree=1000)
rf.3
varImpPlot(rf.3)
Predicion <- predict(rf.3, bt.val)
Predicion
bt.val
Predicion
sample.ind.wifi.2 <- sample(2, nrow(DataFrame), replace = T, prob = c(0.7,0.3))
sample.ind.wifi.2 <- sample(2, nrow(DataFrameWifi), replace = T, prob = c(0.7,0.3))
train.wifi.2 <- DataFrameWifi[sample.ind==1,]
val.wifi.2 <- DataFrameWifi[sample.ind==2,]
rf.4<- randomForest(as.factor(location) ~., data = train.wifi.2, importance=TRUE,ntree=1000)
rf.4<- randomForest(as.factor(location) ~., data = train.wifi.2, importance=TRUE,ntree=1000)
rf.4
rf.4<- randomForest(as.factor(location) ~., data = train.wifi.2, importance=TRUE,ntree=1000)
rf.4
varImpPlot(rf.4)
Predicion <- predict(rf.4, val.wifi.2)
Predicion
val.wifi.2
Glass.rf <- randomForest(Type ~.,data = trainGlass, importance=TRUE,ntree=1000)
Glass.rf
knn_bt_target  <- bt.val$distance)
knn_bt_target  <- bt.val$distance
knn_bt_target  <- bt.val$location
sam_knn <- knn(bt.train , bt.val , knn_bt_target , k=5)
finger_train_norm
# Year: 2017
# Title: Fingerprint corridoio, LG 10 metri
# Goal: Classificare distanza in base rssi
# Author: Edoardo Longo
#
#
# Define your working directory
# Ensure to use the forward / slash
setwd("/Users/edoardesd/Documents/R_files")
getwd()
#es: DATASET: rssi | echotime |  distance
#             -10       23.34        "1"
###### IMPORT ######
require(class)
library(readr)
require(ggplot2)
LG_FINGERPRINT_CORRIDOIO <- read_csv("~/Documents/R_files/RSSIvsRX/data/LG_FINGERPRINT_CORRIDOIO.csv",  col_types = cols(`01` = col_character()))
LG_FINGERPRINT_CORRIDOIO <- read_csv("~/Documents/R_files/RSSIvsRX/data/LG_FINGERPRINT_CORRIDOIO.csv",  col_types = cols(`01` = col_character()))
LG_FINGERPRINT_CORRIDOIO_RX <- read_csv("~/Documents/R_files/RSSIvsRX/data/LG_FINGERPRINT_CORRIDOIO_RX.csv",  col_types = cols(`01` = col_character()))
TAB_FINGERPRINT_CORRIDOIO_RX <- read_csv("~/Documents/R_files/RSSIvsRX/data/TAB_FINGERPRINT_CORRIDOIO_RX.csv",  col_types = cols(`01` = col_character()))
colnames(LG_FINGERPRINT_CORRIDOIO)[3] <- "distance"
colnames(LG_FINGERPRINT_CORRIDOIO_RX)[4] <- "distance"
colnames(TAB_FINGERPRINT_CORRIDOIO_RX)[4] <- "distance"
ggplot(data = LG_FINGERPRINT_CORRIDOIO,aes(x = distance,y = rssi, group=distance, color=distance)) + stat_sum() + ggtitle("LG RSSI distanza")
ggplot(data = LG_FINGERPRINT_CORRIDOIO,aes(x = rssi,y = echo_time, group=distance, color=distance)) + geom_point() + ggtitle("LG + RSSI ECHO RESP TIME distanza")
ggplot(data = LG_FINGERPRINT_CORRIDOIO_RX,aes(x = rssi,y = rx, group=distance, color=distance)) + stat_sum() + ggtitle("LG RSSI vs RX distanza")
ggplot(data = LG_FINGERPRINT_CORRIDOIO_RX,aes(x = rx,y = rssi, group=distance, color=distance)) + stat_sum() + ggtitle("LG RX vs RSSI distanza")
ggplot(data = TAB_FINGERPRINT_CORRIDOIO_RX,aes(x = rssi,y = rx, group=distance, color=distance)) + stat_sum() + ggtitle("TAB RSSI vs RX distanza")
ggplot(data = TAB_FINGERPRINT_CORRIDOIO_RX,aes(x = rx,y = rssi, group=distance, color=distance)) + stat_sum() + ggtitle("TAB RX vs RSSI distanza")
#Boxplot con media e deviazione standard
#function for computing mean, DS, max and min values
min.mean.sd.max <- function(x) {
r <- c(min(x), mean(x) - sd(x), mean(x), mean(x) + sd(x), max(x))
names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
r
}
normalize <- function(x){ return( (x - min(x)) / (max(x) - min(x) ))  }
bplot_lg_finger <- ggplot(aes(y = rssi, x = factor(distance), color= distance), data = LG_FINGERPRINT_CORRIDOIO)
bplot_lg_finger <- bplot_lg_finger + stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3)
bplot_lg_finger <- bplot_lg_finger + ggtitle("LG fingerprint: RSSI media, st dev +/- media") + xlab("Distanza") + ylab("RSSI")
bplot_lg_finger
######## TODO #######
#knn con echo e rssi, vedere quando è l'errore <- FATTO!
#knn monocolonna solo con rssi, vedere errore <- FATTO
#knn con rssi e rx (cambiare dataset)
#knn con media, mediana, moda, deviazione standard, andando a separare il dataset in gruppi da 100
###### k-NN Normalizzto  RSSI + ECHO ######
#Errore alto
gp <- runif(nrow(LG_FINGERPRINT_CORRIDOIO))
unordered_finger_set <- LG_FINGERPRINT_CORRIDOIO[order(gp),] #mischio il set
summary(unordered_finger_set)
#Normalizzo
norm_finger <- as.data.frame(lapply(unordered_finger_set[,c(1,2)], normalize))
summary(norm_finger)
finger_train_norm <- norm_finger[1:4622,]
finger_test_norm <- norm_finger[4623:4632,]
dim(finger_train_norm )
dim(finger_test_norm )
finger_train_target_norm  <- head(unordered_finger_set$distance, 4622)
length(finger_train_target_norm )
finger_correct_norm  <- tail(unordered_finger_set$distance, 10)
length(finger_correct_norm )
lg_err_norm<-numeric()
for(i in 1:60){
lg_knn_norm <- knn(finger_train_norm , finger_test_norm , finger_train_target_norm , k=i)
lg_err_norm <- c(lg_err_norm, mean(lg_knn_norm == finger_correct_norm))
}
plot(1-lg_err_norm,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG Normalized With Varying K")
##### k-NN NON Normalizzato RSSI + ECHO#####
finger_train <- unordered_finger_set[1:4622,]
finger_train
finger_test <- unordered_finger_set[4623:4642,]
test_2 <- rssi_lg_rasp1[20: 40,]
dim(test_2)
test_2$timestamp= NULL
finger_train_target  <- head(unordered_finger_set$distance, 4622)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#plot test + train fusi <- CAMBIARE COLORE DI TEST PLOT
train_plot <-   geom_point(data = finger_train,aes(x = echo_time,y = rssi, group=distance, color=distance))
test_plot <- stat_sum(data = finger_test,aes(x = echo_time,y = rssi, colour=distance))
g <- ggplot()
g + train_plot + test_plot
#controllare errore
lg_err<-numeric()
for(i in 1:100){
lg_knn <- knn(finger_train , test_2, finger_train_target , k=i)
lg_err <- c(lg_err, mean(lg_knn == test_2$distance))
}
for(i in 1:100){
lg_knn <- knn(finger_train , finger_test, finger_train_target , k=i)
lg_err <- c(lg_err, mean(lg_knn == finger_test$distance))
}
plot(1-lg_err,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG With Varying K")
##### k-NN solo RSSI #####
finger_train_mono <- unordered_finger_set[1:4622, 1]
#finger_test_mono <- unordered_finger_set[4633:4642,3] li prendo dal mio set
dim(finger_train_mono)
#dim(finger_test_mono)
test_mono <- rssi_lg_rasp1[2500: 2940,4]
test_mono
dim(test_mono)
finger_train_target_mono  <- head(unordered_finger_set$distance, 4622)
#length(finger_train_target_mono)
#controllare errore
lg_err_mono<-numeric()
for(i in 1:100){
lg_knn_mono <- knn(finger_train_mono , test_mono, finger_train_target_mono , k=i)
lg_err_mono <- c(lg_err_mono, mean(lg_knn_mono == test_mono$distance))
}
plot(1-lg_err_mono,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG only RSSI With Varying K")
##### k-NN RSSI + RX #####
#Info iniziali
LG_FINGERPRINT_CORRIDOIO_RX <- read_csv("~/Documents/R_files/RSSIvsRX/data/LG_FINGERPRINT_CORRIDOIO_RX.csv")
TAB_FINGERPRINT_CORRIDOIO_RX <- read_csv("~/Documents/R_files/RSSIvsRX/data/TAB_FINGERPRINT_CORRIDOIO_RX.csv")
colnames(LG_FINGERPRINT_CORRIDOIO_RX)[4] <- "distance"
colnames(TAB_FINGERPRINT_CORRIDOIO_RX)[4] <- "distance"
ggplot(data = LG_FINGERPRINT_CORRIDOIO_RX,aes(x = rx,y = rssi, group=distance, color=distance)) + stat_sum() + ggtitle("LG RSSI/RX distanza")
ggplot(data = TAB_FINGERPRINT_CORRIDOIO_RX,aes(x = rx,y = rssi, group=distance, color=distance)) + stat_sum() + ggtitle("LG RSSI/RX distanza")
bplot_tab_finger <- ggplot(aes(y = rssi, x = factor(distance), color= distance), data = TAB_FINGERPRINT_CORRIDOIO_RX)
bplot_tab_finger <- bplot_tab_finger + stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3)
bplot_tab_finger <- bplot_tab_finger + ggtitle("TAB fingerprint: RSSI media, st dev +/- media") + xlab("Distanza") + ylab("RSSI")
bplot_tab_finger
bplot_tab_finger_rx <- ggplot(aes(y = rx, x = factor(distance), color= distance), data = TAB_FINGERPRINT_CORRIDOIO_RX)
bplot_tab_finger_rx <- bplot_tab_finger_rx + stat_summary(fun.data = min.mean.sd.max, geom = "boxplot") + geom_jitter(position=position_jitter(width=.2), size=3)
bplot_tab_finger_rx <- bplot_tab_finger_rx + ggtitle("TAB fingerprint: RSSI media, st dev +/- media") + xlab("Distanza") + ylab("RSSI")
bplot_tab_finger_rx
#knn rssi/rx samsung
finger_train_tab <- TAB_FINGERPRINT_CORRIDOIO_RX
finger_test_tab <- subset(visual_sam_1, distance == "02")
finger_test_tab
dim(finger_test_tab)
dim(finger_train_tab)
finger_train_tab$timestamp=NULL
finger_test_tab$timestamp=NULL
finger_train_target_tab  <- TAB_FINGERPRINT_CORRIDOIO_RX$distance
#plot test + train fusi <- CAMBIARE COLORE DI TEST PLOT
train_plot <-   geom_point(data = finger_train_tab,aes(x = rx,y = rssi, group=distance, color=distance))
test_plot <- stat_sum(data = finger_test_tab,aes(x = rx,y = rssi, colour=distance))
g <- ggplot()
g + train_plot + test_plot
#controllare errore
tab_err<-numeric()
for(i in 1:100){
tab_knn <- knn(finger_train_tab , finger_test_tab, finger_train_target_tab , k=i)
tab_err <- c(tab_err, mean(tab_knn == finger_test_tab$distance))
}
plot(1-tab_err,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for TAB RSSI/RX With Varying K")
#In alcuni casi è abbastanza alto
unmetro_lg <- subset(LG_FINGERPRINT_CORRIDOIO, LG_FINGERPRINT_CORRIDOIO$distance == "01")
mean(unmetro_lg$rssi)
finger_train
finger_test
finger_train_target
sam_knn <- knn(bt.train , bt.val , knn_bt_target , k=5)
bt.train
knn_bt_target
bt.val
dim(bt.train)
dim(bt.val)
dim(knn_bt_target)
dim(finger_train)
dim(finger_test)
dim(finger_train_target)
len(finger_train_target)
finger_train_target
finger_train
finger_train_target
knn_bt_target  <- bt.train$location
sam_knn <- knn(bt.train , bt.val , knn_bt_target , k=5)
sam_knn
knn_err<-numeric()
sam_err_knn
table(sam_knn, bt.val)
sam_knn
dim(sam_knn)
table(sam_knn, knn_bt_target)
table(sam_knn, bt.val$location)
prop.table(table(sam_knn, bt.val$location))
finger_correct_norm
for(i in 1:60){
sam_knn_bis <- knn(bt.train , bt.val , knn_bt_target , k=i)
sam_err_bis <- c(knn_err, mean(sam_knn_bis == bt.val$location))
}
plot(1-sam_err_bis,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG Normalized With Varying K")
for(i in 1:60){
sam_knn_bis <- knn(bt.train , bt.val , knn_bt_target , k=i)
sam_err_bis <- c(knn_err, mean(sam_knn_bis == bt.val$location))
}
plot(1-sam_err_bis,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG Normalized With Varying K")
sam_knn_bis
sam_err_bis
knn_err<-numeric()
for(i in 1:60){
sam_knn_bis <- knn(bt.train , bt.val , knn_bt_target , k=i)
sam_err_bis <- c(knn_err, mean(sam_knn_bis == bt.val$location))
}
plot(1-sam_err_bis,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG Normalized With Varying K")
rf.3
lg_knn <- knn(finger_train , test_2, finger_train_target , k=i)
lg_err <- c(lg_err, mean(lg_knn == test_2$distance))
lg_knn_norm <- knn(finger_train_norm , finger_test_norm , finger_train_target_norm , k=i)
lg_err_norm <- c(lg_err_norm, mean(lg_knn_norm == finger_correct_norm))
for(i in 1:60){
lg_knn_norm <- knn(finger_train_norm , finger_test_norm , finger_train_target_norm , k=i)
lg_err_norm <- c(lg_err_norm, mean(lg_knn_norm == finger_correct_norm))
}
lg_err_norm<-numeric()
for(i in 1:60){
lg_knn_norm <- knn(finger_train_norm , finger_test_norm , finger_train_target_norm , k=i)
lg_err_norm <- c(lg_err_norm, mean(lg_knn_norm == finger_correct_norm))
}
plot(1-lg_err_norm,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG Normalized With Varying K")
knn_bt_target  <- bt.train$location
sam_knn <- knn(bt.train , bt.val , knn_bt_target , k=5)
sam_knn
knn_err<-numeric()
prop.table(table(sam_knn, bt.val$location))
for(i in 1:60){
sam_knn_bis <- knn(bt.train , bt.val , knn_bt_target , k=i)
sam_err_bis <- c(knn_err, mean(sam_knn_bis == bt.val$location))
}
plot(1-sam_err_bis,type="l",ylab="Error Rate",
xlab="K",main="Error Rate for LG Normalized With Varying K")
lg_err_norm
lg_knn_norm
sam_err_bis
finger_train_norm
finger_test_norm
finger_train_target_norm
finger_train_norm
lg_knn_norm <- knn(finger_train_norm , finger_test_norm , finger_train_target_norm , k=i)
finger_test_norm
finger_train_norm
install.packages("gmodels")
sam_knn <- knn(bt.train , bt.val , knn_bt_target , k=5)
CrossTable(x = bt.val$location, y = sam_knn)
setwd("/Users/edoardesd/Documents/R_files")
getwd()
install.packages("gmodels")
system('defaults write org.R-project.R force.LANG en_US.UTF-8')
install.packages("gmodels")
